// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  co_user_id,
  st_title,
  st_type,
  st_description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, co_user_id, st_title, st_type, st_description, dt_created_at
`

type CreateCategoryParams struct {
	CoUserID      int32  `json:"co_user_id"`
	StTitle       string `json:"st_title"`
	StType        string `json:"st_type"`
	StDescription string `json:"st_description"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.CoUserID,
		arg.StTitle,
		arg.StType,
		arg.StDescription,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CoUserID,
		&i.StTitle,
		&i.StType,
		&i.StDescription,
		&i.DtCreatedAt,
	)
	return i, err
}

const deleteCategories = `-- name: DeleteCategories :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategories(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategories, id)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT id, co_user_id, st_title, st_type, st_description, dt_created_at FROM categories 
where co_user_id = $1 and st_type = $2 
and st_title like $3 and st_description like $4
`

type GetCategoriesParams struct {
	CoUserID      int32  `json:"co_user_id"`
	StType        string `json:"st_type"`
	StTitle       string `json:"st_title"`
	StDescription string `json:"st_description"`
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories,
		arg.CoUserID,
		arg.StType,
		arg.StTitle,
		arg.StDescription,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CoUserID,
			&i.StTitle,
			&i.StType,
			&i.StDescription,
			&i.DtCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByUserIdAndType = `-- name: GetCategoriesByUserIdAndType :many
SELECT id, co_user_id, st_title, st_type, st_description, dt_created_at FROM categories 
where co_user_id = $1 and st_type = $2
`

type GetCategoriesByUserIdAndTypeParams struct {
	CoUserID int32  `json:"co_user_id"`
	StType   string `json:"st_type"`
}

func (q *Queries) GetCategoriesByUserIdAndType(ctx context.Context, arg GetCategoriesByUserIdAndTypeParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesByUserIdAndType, arg.CoUserID, arg.StType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CoUserID,
			&i.StTitle,
			&i.StType,
			&i.StDescription,
			&i.DtCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByUserIdAndTypeAndDescription = `-- name: GetCategoriesByUserIdAndTypeAndDescription :many
SELECT id, co_user_id, st_title, st_type, st_description, dt_created_at FROM categories 
where co_user_id = $1 and st_type = $2
and st_description like $3
`

type GetCategoriesByUserIdAndTypeAndDescriptionParams struct {
	CoUserID      int32  `json:"co_user_id"`
	StType        string `json:"st_type"`
	StDescription string `json:"st_description"`
}

func (q *Queries) GetCategoriesByUserIdAndTypeAndDescription(ctx context.Context, arg GetCategoriesByUserIdAndTypeAndDescriptionParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesByUserIdAndTypeAndDescription, arg.CoUserID, arg.StType, arg.StDescription)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CoUserID,
			&i.StTitle,
			&i.StType,
			&i.StDescription,
			&i.DtCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByUserIdAndTypeAndTitle = `-- name: GetCategoriesByUserIdAndTypeAndTitle :many
SELECT id, co_user_id, st_title, st_type, st_description, dt_created_at FROM categories 
where co_user_id = $1 and st_type = $2
and st_title like $3
`

type GetCategoriesByUserIdAndTypeAndTitleParams struct {
	CoUserID int32  `json:"co_user_id"`
	StType   string `json:"st_type"`
	StTitle  string `json:"st_title"`
}

func (q *Queries) GetCategoriesByUserIdAndTypeAndTitle(ctx context.Context, arg GetCategoriesByUserIdAndTypeAndTitleParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesByUserIdAndTypeAndTitle, arg.CoUserID, arg.StType, arg.StTitle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CoUserID,
			&i.StTitle,
			&i.StType,
			&i.StDescription,
			&i.DtCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, co_user_id, st_title, st_type, st_description, dt_created_at FROM categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CoUserID,
		&i.StTitle,
		&i.StType,
		&i.StDescription,
		&i.DtCreatedAt,
	)
	return i, err
}

const updateCategories = `-- name: UpdateCategories :one
UPDATE categories
SET st_title = $2, st_description = $3
WHERE id = $1
RETURNING id, co_user_id, st_title, st_type, st_description, dt_created_at
`

type UpdateCategoriesParams struct {
	ID            int32  `json:"id"`
	StTitle       string `json:"st_title"`
	StDescription string `json:"st_description"`
}

func (q *Queries) UpdateCategories(ctx context.Context, arg UpdateCategoriesParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategories, arg.ID, arg.StTitle, arg.StDescription)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CoUserID,
		&i.StTitle,
		&i.StType,
		&i.StDescription,
		&i.DtCreatedAt,
	)
	return i, err
}
